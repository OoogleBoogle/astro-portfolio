---
const navItems = [
  {
    text: 'Resume',
    path: '/resume/',
    icon: '<svg height="50" viewBox="0 0 32 32" width="50" xmlns="http://www.w3.org/2000/svg"><path d="m27 0h-24c-1.65 0-3 1.35-3 3v26c0 1.65 1.35 3 3 3h24c1.65 0 3-1.35 3-3v-26c0-1.65-1.35-3-3-3zm-1 28h-22v-24h22zm-18-10h14v2h-14zm0 4h14v2h-14zm2-13c0-1.657 1.343-3 3-3s3 1.343 3 3-1.343 3-3 3-3-1.343-3-3zm5 3h-4c-1.65 0-3 .9-3 2v2h10v-2c0-1.1-1.35-2-3-2z"/></svg>'
  },
  {
    text: 'Home',
    path: '/',
    icon: '<svg height="50" viewBox="0 0 32 32" width="50" xmlns="http://www.w3.org/2000/svg"><path d="m32 18.451-16-12.42-16 12.42v-5.064l16-12.42 16 12.42zm-4-.451v12h-8v-8h-8v8h-8v-12l12-9z"/></svg>',
  },
  {
    text: 'Projects',
    path: '/projects/',
    icon: `<svg height="50" viewBox="0 0 32 32" width="50" xmlns="http://www.w3.org/2000/svg"><path d="m28 4v26h-21c-1.657 0-3-1.343-3-3s1.343-3 3-3h19v-24h-20c-2.2 0-4 1.8-4 4v24c0 2.2 1.8 4 4 4h24v-28z"/><path d="m7.002 26c-.001 0-.001 0-.002 0-.552 0-1 .448-1 1s.448 1 1 1h.002 18.997v-2z"/></svg>`
  }
]

const navTextAnimatedClasses = ['opacity-0', 'translate-y-4', 'scale-50'];
---

<nav class="grid grid-cols-3 gap-0.5 xl:grid-rows-[repeat(2,min-content)] xl:pt-36 sticky">
  {navItems.map((item, i) => {
    return (
      <a href={item.path}
          class={`btn btn-${i + 1} min-h-full bg-purple bg-opacity-60 hover:bg-opacity-70 flex items-center justify-center xl:aspect-square xl:origin-center xl:rotate-45 xl:relative xl:bg-opacity-30 xl:hover:bg-opacity-30`}
          title={item.text}>
        <span class="icon hidden xl:block xl:-rotate-45 z-10" aria-hidden="true" set:html={item.icon}></span>
        <p class="xl:hidden font-display text-lg text-almost-white">{item.text}</p>
      </a>
    )
  })}
  <nav-text class="hidden xl:block" data-item-names={navItems.map(item => item.text)} data-animated-classes={navTextAnimatedClasses}>
    {navItems.map((item) => (
      <p class:list={['text-light-purple', 'font-sans', 'text-xl', 'transition-all', 'duration-300', 'absolute', 'inset-x-0', 'top-20', 'text-center', navTextAnimatedClasses]}>{item.text}</p>
    ))}
  </nav-text>
</nav>

<style is:global>
  @media (min-width: 1280px) {
    [aria-current='page'] {
      box-shadow: 0 0 1px 1px #eed6fe;
    }

    .btn {
      position: relative;
      z-index: 1;
      cursor: pointer;
      transition: box-shadow 0.5s ease-in-out;
    }

    .btn::before {
      background: radial-gradient(
        300px circle at var(--mouse-x) var(--mouse-y),
        rgba(255,255,266, 0.2),
        transparent 40%
      );
      position: absolute;
      content: '';
      top: 0;
      left: 0;
      opacity: 0;
      height: 100%;
      width: 100%;
      z-index: 2;
      transition: opacity 0.6s ease-in-out;
    }

    .btn:hover::before {
      opacity: 1;
    }

    .btn:hover .icon svg {
      opacity: 1;
    }

    .btn-1 {
      grid-area: 2 / 1;
      left: 40px;
      top: -40px;
    }

    .btn-2 {
      grid-area: 1 / 2;
    }

    .btn-3 {
      grid-area: 2 / 3;
      left: -40px;
      top: -40px;
    }

    .icon svg {
      position: relative;
      z-index: 4;
      opacity: .7;
      transition: opacity 0.6s ease-in-out;
      pointer-events: none;
    }

    nav-text {
      position: relative;
      grid-area: 2 / 2;
    }
  }
</style>

<script>
  const btns = document.querySelectorAll('.btn') as NodeListOf<HTMLLinkElement>;
  const navTextEl = document.querySelector('nav-text') as HTMLElement;
  const desktop = "(min-width: 1280px)";
  setAriaCurrent();

  function getRotatedMousePosition(event: MouseEvent, element: HTMLLinkElement) {
    const rect = element.getBoundingClientRect();
    const angle = (Math.PI / 4); // 45 degrees in radians
    const mouseX = event.clientX - rect.left - 110;
    const mouseY = event.clientY - rect.top;

    // apply inverse rotation transform
    const rotatedX = (mouseX * Math.cos(angle)) + (mouseY * Math.sin(angle));
    const rotatedY = (-mouseX * Math.sin(angle)) + (mouseY * Math.cos(angle));

    // return transformed coordinates relative to element
    return { x: rotatedX, y: rotatedY };
  }

  function setAriaCurrent() {
    const existing = document.querySelector('[aria-current="page"]');
    const path = window.location.pathname;
    const current = document.querySelector(`[href="${path}"]`);

    if (existing) {
      existing.removeAttribute('aria-current');
    }

    current?.setAttribute('aria-current', 'page');
  }

  document.addEventListener('swup:pageView', () => {
    setAriaCurrent();
  });

  for (const btn of btns) {
    btn.addEventListener('mousemove', (event) => {
      if (window.matchMedia(desktop).matches) {
        const position = getRotatedMousePosition(event, btn);
        const currentTarget = event.currentTarget as HTMLLinkElement;
        const target = event?.target as HTMLElement;

        const parentLink = target?.closest('a');
        if (parentLink) {
          navTextEl.setAttribute('text', parentLink.textContent?.trim() || '');
        }

        if (currentTarget) {
          currentTarget.style.setProperty('--mouse-x', position.x + 'px');
          currentTarget.style.setProperty('--mouse-y', position.y + 'px');
        }
      }
    });

    btn.addEventListener('mouseleave', () => {
      if (window.matchMedia(desktop).matches) {
        navTextEl.setAttribute('text', '');
      }
    })
  }

  class NavText extends HTMLElement {
    private navItemNames = this.dataset.itemNames?.split(',') as string[];
    private navItemText = this.querySelectorAll('p');
    private animatedClasses = this.dataset.animatedClasses?.split(',') as string[];

    static get observedAttributes() {return ['text']}

    attributeChangedCallback(name: string, oldVal: string, newVal: string) {
      if (newVal !== oldVal) {
        const newItem = this.navItemText[this.navItemNames.indexOf(newVal)];
        const oldItem = this.navItemText[this.navItemNames.indexOf(oldVal)];

        if (oldItem) {
          oldItem.classList.add(...this.animatedClasses);
        }

        if (newItem) {
          newItem.classList.remove(...this.animatedClasses);
        }
      }
    }
  }

  customElements.define('nav-text', NavText);
</script>
